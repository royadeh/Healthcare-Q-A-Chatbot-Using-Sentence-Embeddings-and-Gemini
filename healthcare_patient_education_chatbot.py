# -*- coding: utf-8 -*-
"""Healthcare Patient Education Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HhtmQiQYbB4UCaXVcO0C-8Pxx9whHm6V
"""

import pandas as pd
from sentence_transformers import SentenceTransformer, util
import openai
import google.genai as genai
import os

# Load patient education data
df = pd.read_csv('/content/medquad.csv')
df.head()

# Load embedding model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Embed all content once
corpus_embeddings = model.encode(df['answer'].head(100).tolist(), convert_to_tensor=True)

GEMINI_AI_API_KEY = os.getenv('GEMINI_AI_API_KEY')
gemmini_client = genai.Client(api_key=GEMINI_AI_API_KEY)
gemmini_client = genai.Client(api_key=GEMINI_AI_API_KEY)

df = df.head(100)
def find_best_resources(query, top_k=3):
    query_embedding = model.encode(query, convert_to_tensor=True)
    cosine_scores = util.pytorch_cos_sim(query_embedding, corpus_embeddings)[0]
    top_results = cosine_scores.topk(k=top_k)

    results = []
    for score, idx in zip(top_results.values, top_results.indices):
        idx=idx.item()
        title = df.iloc[idx]['question']
        content = df.iloc[idx]['answer']

        results.append((title, content, score.item()))
    return results

from openai import OpenAI

import os
from openai import OpenAI



def generate_friendly_response(resources):
    prompt = "You are a friendly healthcare assistant. Please explain these topics as brief bullet points in simple language with emojis where appropriate:\n\n"
    for i, (title, content, _) in enumerate(resources, 1):
        prompt += f"{i}. {title}: {content}\n"
    prompt += "\nPlease provide a concise, easy-to-understand summary with bullet points and emojis."

    response = gemmini_client.models.generate_content(
        model="gemini-2.0-flash",
        contents=prompt
    )
    info = response.text.strip()
    return info


def chat():
    print("Welcome to the Patient Education Chatbot! Type your question or 'exit' to quit.")
    while True:
        user_input = input("\nYour question: ")
        if user_input.lower() == 'exit':
            print("Goodbye!")
            break

        best_resources = find_best_resources(user_input)
        reply = generate_friendly_response(best_resources)
        print("\nBot:", reply)

chat()